apply plugin: 'cpp'
apply plugin: 'eclipse'

eclipse.project.natures 'org.eclipse.pde.PluginNature'

sourceSets.main.java.srcDirs = ['source/java']

dependencies {
	compile(
		'commons-io:commons-io:2.4',
		project(':com.ibm.wala.core'),
		project(':com.ibm.wala.shrike'),
		project(':com.ibm.wala.util'),
		)
}

javadoc {
	def js = ':com.ibm.wala.cast.js'
	dependsOn "$js:compileJava"
	doFirst {
		classpath += files project(js).compileJava
	}
	/*
	// creates circular dependency
	def jsDoc = project(js).javadoc
	dependsOn jsDoc
	options.links jsDoc.outputDirectory.path
	*/
}

def currentJavaHome = org.gradle.internal.jvm.Jvm.current().javaHome

model {
	repositories {
		libs(PrebuiltLibraries) {
			jdk {
				def jniIncludeDir = "$currentJavaHome/include"
				headers.srcDir jniIncludeDir
				binaries.withType(SharedLibraryBinary) {
					switch (targetPlatform.operatingSystem.name) {
						case 'linux':
							headers.srcDirs "$jniIncludeDir/linux"
							break
						case 'osx':
							headers.srcDirs "$jniIncludeDir/darwin"
							break
						case 'windows':
							headers.srcDirs "$jniIncludeDir/win32"
							break
					}
					switch ("$targetPlatform.operatingSystem.name/$targetPlatform.architecture.name") {
						case 'linux/x86-64':
							sharedLibraryLinkFile = file("$currentJavaHome/jre/lib/amd64/server/libjvm.so")
							break
						case 'osx/x86-64':
							sharedLibraryLinkFile = file("$currentJavaHome/jre/lib/server/libjvm.dylib")
							break
						case 'windows/x86-64':
							// TODO: determine JVM library name and location on Windows
							// sharedLibraryLinkFile = '???'
							break
					}
				}
			}
		}
	}
	components {
		cast(NativeLibrarySpec) {
			sources.cpp {
				def cSourceDir = 'source/c'
				source {
					srcDirs = ["$cSourceDir/jni"]
					include '*.cpp'
				}
				exportedHeaders.srcDirs = ["$cSourceDir/include"]
				lib library: 'jdk'
			}
			binaries {
				withType(StaticLibraryBinarySpec) {
					buildable = false
				}
				withType(SharedLibraryBinarySpec) {
					switch ("$targetPlatform.operatingSystem.name/$targetPlatform.architecture.name") {
						case 'linux/x86-64':
							$
							.repositories['libs']
							.resolveLibrary('jdk')
							.binaries
							.withType(SharedLibraryBinary)
							.findResults { it.sharedLibraryLinkFile }
							*.parentFile
							.each { linker.args "-Wl,-rpath=$it" }
					}
				}
			}
		}
	}
}

// TODO: if we eventually stop supporting Maven, then we may be able
// to discard the "copyJarsIntoLib" task and the corresponding lines
// in "META-INF/MANIFEST.MF" and "build.properties"

task copyJarsIntoLib(type: Sync) {
	def commonsIoJar = configurations.runtimeClasspath.files[0]
	assert commonsIoJar.name.startsWith('commons-io-')
	from commonsIoJar
	into 'lib'
}

assemble.dependsOn copyJarsIntoLib
clean.dependsOn cleanCopyJarsIntoLib
